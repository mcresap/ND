/*This program prompts the user enter the name of a file with sayings in them and then asks the user to choose an option of what he/she wants to do. The user has the choice of listing all the sayings in the file, enter a new saying to the list, list all the sayings with a given substring, save all the current sayings to a new file, or quit. Each option corresponds to a number (1-5 respectively). When users enter 1 as their option, the program displays a list of the contents of the file, all the sayings. When users enter 2, the program prompts them to enter the saying they want to add to the list. When users enter 3 the program asks for the string they're looking for in the file and will list the lines with that string or will tell them there is no match in the file. When users choose 4, the program prompts them to enter the name of the file to be created and then any added sayings, and the original sayings are put in a new file with this chosen name. After every time the user chooses an option other that 5 (quit) and the program completes it (with or without another input from the user depending) the program reprompts the user to choose again.*/
/*This program begins by prompting a user to enter the file of quotes/sayings to be used. It takes the user's inputted file name and stores it as a string and streams in in using ifstream then opens the file. It checks to see if the file exists or not and returns an error message and quits the program if it does not exist. Then, the program takes the inputted file stream and stores it in a vector of strings called "file". The program does this by first taking the first line in the file and putting it into a string called "quote" then it uses a while loop to add each line of the file to this string "quote". The while loop uses push_back of the vector "file" to put each ine after the previous and uses getline to get the next line of the file to put next. The while loop continues to add lines until it hits the end of the file. Then, the program prompts the user for their choice of what they want to do with this file of quotes and continues to prompt the user until they quit. The program takes in the users input and verifies that it is within the range of options and if it is not, it displays and error and reprompts the user to enter a new choice. Once the user enters a valid choice, the program takes the user's choice and calls the corresponding function to perform the selected task and ends the program and says thank you if the user selects 5 to quit. If the user chooses 1 the program uses the function to list all the sayings in the file and this function uses the vector of strings "file" to do this. This function uses iteration to display all of the vector's contents which are the same as the file's contents and does this line by line. If the user chooses 2 the program uses the function to let the user enter a new saying and passes the vector of strings from the file "file" to the function so the vector can be changed (added to). The function asks the user to enter a new saying and stores their input in a string and uses getline to keep it as one line. The function then uses push_back to add the user's saying to the end of the vector of strings. If the user chooses 3 the program uses the function to list sayings that contain a given substring the user enters. This function asks the user to enter the string to search for and stores it as a string. This function then uses a for loop to loop through the entire vector of strings, "file", and uses an if statement in this for loop to check each line in the vector for the entered sting. If the line has the string, the function displays that line. The function also uses an integer "n" to track whether there are no matches. "n" is set to zero and remains zero unless there is at least one match of the string in the file, then it becomes 1. If there are no matches "n" is zero and the function displays a message that there are no matches. Finally, if the user enters 4, the program uses the function that saves all the current sayings to a file. This function asks the user to enter the name of the new file they want to save the current sayings to and stores this file name in a string. Then the function uses ofstream to output all the sayings to this new file. The function does this with a for loop and loops through the vector of strings "file" which has all the old and any added syaings and outputs them to the new file. This function saves any new sayings the user added with all the original sayings. */
/*I verified that the output of the program was correct by trying all of the options multiple times and checking the output with my inputted sayings file. I made sure the program displayed all of the sayings and did so correctly when I chose 1. I checked that when I entered a new saying and displayed all the sayings after I entered one, my entered saying was in the list and if I saved the sayings to a new file, my entered sayings were in there. I checked for substrings and words that I knew were in my sayings file and some that weren't to make sure the program displayed all of the correct lines with or displayed the error message that there were no matches. I also checked that the program saved a new file when I chose that option and that it had any new sayings in it or had only the old sayings if I didn't add any. I made sure the program quit when I entered the quit option. I made sure the program gave an error message and reprompted the user when the user entered a choice outside of the range of choices. */
