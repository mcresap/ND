/*From the user's perspective the program opens with a menu of options for what they can do. The user has the option to see different information of states or see some calculations. The menu options include displaying all the data about the states, checking if the population od a state is over a certain number, checking if a state was founded after a certain year, calculating the ration of the number of representatives to the population of a state, seeing the information of a certain state, and quitting the program. If the user selects the first option, (options listed previously were in order of how they are in the menu) the program displays all of the data from the file with the information for each state in a different linein the format: Abbreviation, State Name, Capital, Population, Year founded, Number of representatives. If the user selects the second option the program asks the user to enter a population they want to check. Once the user enteres a population to check, the program prints all of the states with a population over the entered number. If there are no states with population over the entered value, the program tells the user no states were found. If the user chooses the 3rd option, the program asks the user to enter the minimum year they want to find states founded after. Once the user enters the year, the program returns all of the states that were founded after that year. If no states were founded after the entered year, the program tells the user that no states were found in the file founded after that year. If the user enters a negative number for the year to check, the program tells them it is an invalid year and reprompts them with the menu to choose another option. If the user chooses the 4th menu option, the program asks the user to enter the state they want to find the ratio of representatives to population for. When the uesr enters a valid state, the program returns the ratio of representatives/population up to 10 decimal places. The user can enter the state with any combination of upper and lowercase letters but if they enter something that isn't a state name, the program tells the user they entered an invalid state name and reprompts them with the menu to choose another option. The fifth option available to the user asks them to enter a state name and returns the information of the state if they enter a valid state name. The user can enter the state name with any combination of upper and lowercase letters but if they enter something that isn't a state name, the program tells them they entered an invalid state name and reprompts them with the menu to choose another option. The program returns the state information in the format: (with alabama as an example)
Abbreviation: AL
Name: Alabama
Capital: Montgomery
Population: 4859000
Year: 1819
Representatives: 7
If the user chooses the 6th menu option they choose to quit and the program ends.*/
/*From the programmer perspective: the program uses state.h in all of the siles for the State class. The program first opens the file hardcoded in the program: usstates.csv. The program then makes and uses a vector of the State class called states to store the information from the file. To retrieve the data in the file, the program uses peek and a while loop to go through the entire file character-by-character and look ahead to the next character using peek to make sure it doesn't include the end of file character. In the while loop, the program uses the getline function to pull from the stream of the file and seperates each things that is either before a comma or an enter for representatives. It puts all of the data for a state on one line and puts each state's data after the previous using push_back. Then the program uses a while loop to display the menu of options to the user until they enter the exit option. This while loop takes in the users choice after it prompts them with the menu and checks that their entered option is within the range of the menu and reprompts them with the menu and an error if it is not. There are if statements associated with each of the possible choices a user can make and each calls the appropriate function I made unless it is the quit number option which breaks out of the loop and the program ends. The first option calls the display function which iterates through all of the daya and outputs the information it gets from methods in state.cpp. The function points to the part of the current State object looked for, so to list the abbreviation of a state it uses it->getAbbrev() which returns the abbreviation of the state which is the current line you are iterating on. This function returns the data for every state with each state on a new line. The next option calls the popover function which uses the vector of State and takes in the user's input of minimum population they want to find the states with. The function iterates through call of the file's contents and if the popOver method in state.cpp returns true, meaning the population of the current state is over the entered number, the function outputs the state name using the getName method in state.cpp and pointing to that part of the current line/state. This function also uses a bool variable called "found" to track whether there are any states with population over the entered value. If there is at least one value where popOver returns true, the found variable is true and if no values are found, the found variable is false and the function outputs that no states were found with population over the entered number. The third function is very similar to the second and it lists all the states founded after an entered year. The function asks the user for a minimum year to use and uses an if statement to check that the entered value is greater than zero (assuming time starts at year 0) and if it isn't positive then it exits the function, displays an error for the year entered and reprompts the user with the menu. If the year is over zero, the function iterates through all of the file's contents and uses the yearOver method to list the states founded after the entered year with yearOver returning true if the state was founded after the inputted year. This program also uses a bool variable "found" to check that there was at least one state founded after the entered year and tells the user no states were found if none were founded after their year using an if statement. The next option calls the function that calculates the ratio of the number of representatives to the population of a state. The function asks the user to enter a state name and keeps the user's inputted state name as a string and one line/unit in itself. It indexes through the user's inputted state to make the whole string lowercase so that it doesn't matter how the user enters the state name. Then the function iterates through the vector of the file data and uses the getLower methos to make the state name in the file lowercase and checks if it
s the same as the user's inputter state name because both state name's will be all lowercase. Then it uses the ratios method and a pointer to find the ratio of the reps to the population to 10 decimal places. It also uses the bool variable "found" to check that the inputted state is a valid one because if it is not the found variable will never be set to true because the entered state name will never match a state name in the file. If the inputted state is invalud, the user gets an erros and is reprompted with the menu. The last option for an activity calls the statein function which asks the user to enter the name of the state they want the information for. The function stores the entered state as one line and as a string variable called "stateu". The function indexes through the user's inputted state name and makes the whole string lowercase. Then it iterates through the entire contents of the file and uses the getLower method to make all the state names in the file lowercass. As it iterates through the data, the function compares the user's inputted state name to the name of the surrent state/line being iterated through and if they are the same, prints that state's info using the print method. It also uses the bool variable "found" to check if the state inputted by the user was valid. It returns an error message and reprompts the user with the menu if the inputted state was invalid/not one in the file.*/
/*I evaluated my program for correctness by comparing results the program gave me to the information in the data file "usstates.csv". I verified that the information given in each of the menu options was correct by checking the data file and calculating the ratio of representatives to population myself. For option 1 I made sure the program displayed exactly what is in the data file. For option 2 I checked a negative population to make sure the program outputted all of the states because they all have populations over a negative number. I also inputted the population of California because it was large and checked that it only outputted California and any with populations over California's. For option 3 I picked year 2 to make sure the program outputted all states because all the states were founded after year 2. I also picked a later year 1900, that not many states were founded after and went through the file to check that they were all of the states and the correct states. For option 4 I calculated the ratio of a couple states to make sure the program was outputting the correct numbers and it was. For option 5 I picked a couple of states and checked their information in the file. I also checked that inputted states that weren't capitalized or were capitalized in the middle of the name/wierdly could beinputted. I also checked that the program reprompted the user with the menuwhen they entered a negative year or an invalid state name. I also made sure that it reprompted the user with the menu when they chose an option that was above or below the range of options in the menu. I also made sure the program ended when the quit option is chosen at different times. I could check the file myself because it is a relatively short data file.*/
