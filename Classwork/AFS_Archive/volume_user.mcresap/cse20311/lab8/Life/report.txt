//user's perspective
When the user just enters the executable the program asks the user what they want to do: add a cell, remove a cell, go on to the next interation, play continuously, or quit the program. If the user chooses to add a cell he is asked for the row and column they want the new cell to be placed in. If the user enters a number outside the range of the board, they get an error. Once the user enters valid coordinates the program clears the last board and prints a new board with the new cell on it and asks the user what he wants to do again. The user can also remove a cell and can enter the coordinates of the cell he wants to remove. If the cell to remove is already dead, nothing happens but if he chooses a life cell to remove, that cell becomes dead and the program clears the last board and displays the current board with the cell removed. If the user chooses the next iteration option 'n', the program displays what the next iteration is, clearing the previous board. If the user chooses 'p' to play continuously, the program runs forever without asking for more input and the user has to press control C to stop the program. If the user selects 'q', the program ends and quits the game.
The user can also enter the executable and then a scene text file and the program will run the scene on its own. This works when the data file present after the executable consists of a sequence of commands followed by a "p".
If the user enters more than 3 arguments in the command line the program will give an error and quit the program.

//programmer's perspective
The Life game utilizes many programs to play and invokes the Lifeboard class in the implementation, intorduced in the interface for the Lifeboard class, with get and set methods and methods to display the board, check the surrounding cells of a current cell, and advance the game to the next iteration.
The life.cpp program first determines the number of arguments inputted by the user using "argc" and uses a switch to determine the appropriate way to play. If the user only enters the executable, the program calls the function to play interactive mode. If the user enters 2 inputs the program calls the function to play in batch mode. If the user enters more than 2 inputs the program displays an error and quits. 
When the user enters only the executable the program calls the interactive function. The interactive function propts the user for a choice of what to do until the quit with 'q'. The funtion displays the board and options and takes in the user's choice. The function then calls the 'view' function and passes the current board and the user's choice. In the 'view' function, a switch is used to choose the correct operations based on the user's input. When the user enters 'a' to add a cell, the case outputs prompts to ask the user for the row and column numbers of the cell they want to add and takes the user's input in integer variables r and c respectively. The function verifies that the user entered valid coordinates and gives an error if the coordinates are not valid. If the user entered valid coordinates, the function sets that cell to live (subtracting 1 from the row and column numbers entered because the array starts at 0). When the user enters 'r' to kill a live cell, the case outputs prompts to ask the user for the row and column numbers of the cell they want to kill and takes the user's inputs in integer variables r and c respectively. The function verifies that the user entered valid coordinates and gives an error if the coordinates are not valid. If the user enters valid coordinates, the function sets that cell to dead (subtracting 1 from the row and column numbers entered because the array starts at 0). When the user enters 'n' to advance to the next iteration/generation the function calls the methos to advance to the next iteration and the program displays the new board, clearing the previous board first. When the user enters 'p' to play continuously, the function enters a while loop that is always true and that displays the board, advancing it each time it is displayed and slows down the visuals with usleep so that the animation is visible. If the user enters 'q' the function breaks and the program ends. If the user doesn't enter a valid input option, the function displays an error and the program ends.
When the user enters the executable with a file, the program goes into the batch function, passing the file name by reference. The batch function gets the data/scene file and opens it. The function takes in the file data until it hits a sentinel character 'p'. The function performs the commands in the file and then once it hits the end it closes the file and enters a while loop that is always true that continues to display what happens after the data is done. The while loop calls the methods of Lifeboard that display the board and advance the game to the next interation, using usleep to slow it down so the animantion is visible.
//checked for correctness
I verified my programs for correctness by using the given glider text file and making sure the program performed to correct animation. I also checked that my scene files, when run with the executable, displayed the correct shapes or animations that I tried to make. I also made sure the program ran continuously when the user entered 'p' in interactive mode and the program added the correct live cell when the user chose to do that and killed the correct cell when the user chose to do that. I also checked that the program caught the invalid inputs from the user when I entered some.
