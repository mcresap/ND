User's Perspective:
The user can use "crossword" as the executable for the crossword anagram. The user has three options for how to use the program: 1. Enter words manually (standard input) and have standard output. 2. Input coming from a named file containing the words and standard output. 3. Input from a named file and output to a named file.  If the user enters more than 2 arguments after the executable, they recieve an error.
If the user chooses to enter just the executable, the program prompts you to enter up to 20 words each 15 or fewer characters. The user gets an error if they enter a word with more than 15 characters (even though the instructions say input will be valid). After the user enters a period after their words, the program prints out the solution to the crossword, the empty puzzle with spaces for the words, and the clues with the position of the first letter of each word along with that word with its letters scrambled.
If the user enters a file after the excutable, the program returns an error if the file does not exist and if the file  is valid, the program prints out the solution to the crossword puzzle, the empty puzzle with spaces for the words, and the clues with the position of the first letter of each word along with that word with its letters scrambled.
If the user enters two file names after the executable, the program returns an error if the first file does not exist, if the file is valid, the program prints out nothing in the command line. However, the output from running the program is printed into the file that the user named after the input file. In the output file, the solution to the puzzle is printed, the empty puzzle with spaces for the words to go, and the clues for solving the puzzle, all the same as before just inside the file.
All of the user's files must end in a period and the user must end their manual/interactive mode input with a period.


Programmer's Perspective:
This program creates a crossword anagram puzzle with clues than can be solved on paper and it provides a solution to the user. The main program "crossword.cpp" determines which mode to perform in based on the number of arguments entered after the user enters the executable. If the user enters one argument/just the executable the program calls the interactive mode function. If the user enters one argument after the executable, the program enters the function/mode to take word input from a file. If the user enters two arguments after the executable, the program enters the function to take input from a file and output to a file. If the user enters more than two arguments after the executable, the program stops and displays an error to the user. This whole crossword program utilizes a class created for the board of the crossword and therefore combines an interface, impementation, and driver using a Makefile.
If the user only enters the executable (one argument total) the main program calls the interactive mode function. The interactive mode function asks the user to input words correctly and checks that the words aren't too long. As the user enters words they are taken in and added to two vectores of strings, both store all the entered words and one is used to laster shuffle the letters of all the words to be used as clues. The function calls the placeFirst method which places the longest word onto the board in the middle of the board. Then the function stores the row and column value of the first letter of the word and the orientation of the word onthe board to be used in the clues (the first word is always horizontal). Then the function takes the rest of the words and tries to place them on the board, using methods of the Board class. The function loops through the vector that is storing all the words and uses the placeNext method to see if the word can be added, then the function stores the row and column value of the first letter of each word and the orientation of each ord for the clues. Then the function uses the print method to print the solution and board and then loops through the stored row and column, orientation, and shuffled letter words values to print out the clues for each word. Once the user enters a period the program stops taking in the user's words.
If the user enters a file name after the executable, the main program calls the "infile" function which is the approriate mode. The function gets the file for the input and checks if the file exists and returns an error if it doesn't. Then the function takes in each word of the file into "inword" which is a string variable. Then the function goes through the whole file until it reaches a period and checks that each word is not more than 15 characters and if it isn't it converts each letter of each word to uppercase and if the word is more than 15 characters, the function displays an error to the user. Then the function uses the same method as in the interactive mode to create the crossword, solution, and clues. It adds the longest word to the middle of the puzzle using the placeFirst, then adds the rest of the words if it can and records the orientation, and potition of the first letter of each word using getRow and getCol methods. Then the function uses the print method to print out the output of the run and then prints the clues.
If the user enters two file names after the executable, the main program calls the "outfile" function which is the appropriate mode. The function takes the first argument after the executable (the input file) and checks if it exists and uses the same strategy as when the user only enters one file to open the file and take in the input. Then the function uses the same methods as in the interactive mode and the mode that takes input from a file and does standard output and the function outputs the same output but to the file the user specified in the command line. The output is the same but in a file. This was done by adding a method "printout" in the implementation that allows output to be done in the same way as with standard output but to a file.



Verification:
I first verified that the error was displayed when the user enters more than two arguments after the executable. I then tested each of the three modes to ensure they were working properly.
I made the all of my errors displayed when the user did the wrong thing.
I also made sure the clues given were accurate and had the shuffled word, the correct orientation of the word on the board, and the correct coordinates of the first letter of each word. I also made sure the crossword was created correctly, only touching words when they share a letter and only at that letter. I made sure the solution matched where the blank spaces were in the puzzle.
While my program does not display the crossword the same way the example outputs do, it still is able to properly handle the words.
The only error I believe I have in this lab is when the program cannot place a word. I prevented it from just givng a seg fault error in the implementation within the method "placeNext" because it now has a flag that tracks if a word is ever placed on the board and if it is not the program reports an error and breaks out of the loop so it doesn't continue to try to add the word when it can't. So, the program reports an error that when it can't place a word and tells you what words it couldn't place and does not place the word on the puzzle or solution. However, I could not get it to not print out coordinates for the words that weren't placed so, the program still prints coordinates that are incorrect and still lists clues for words that weren't added to the board.
